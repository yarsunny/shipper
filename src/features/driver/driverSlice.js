import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchDrivers } from "./driverAPI";

const initialState = {
  currentPage: 0,
  currentPageDrives: [],
  drivers: [],
  driversPerPage: 5,
  status: "idle",
  totalPages: 0,
};

export const loadDrivers = createAsyncThunk("driver/loadDrivers", async () => {
  const response = await fetchDrivers();
  return response.json();
});

export const driverSlice = createSlice({
  name: "driver",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    next: (state) => {
      state.currentPage += 1;
      state.currentPageDrives = state.drivers.slice(
        state.currentPage * state.driversPerPage,
        state.currentPage * state.driversPerPage + state.driversPerPage
      );
    },
    previous: (state) => {
      state.currentPage -= 1;
      state.currentPageDrives = state.drivers.slice(
        state.currentPage * state.driversPerPage,
        state.currentPage * state.driversPerPage + state.driversPerPage
      );
    },
  },

  // Actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadDrivers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loadDrivers.fulfilled, (state, action) => {
        state.status = "idle";
        state.drivers = action.payload.results;
        state.totalPages = Math.ceil(
          state.drivers.length / state.driversPerPage
        );
        state.currentPageDrives = state.drivers.slice(
          0,
          state.drivers.length < state.driversPerPage
            ? state.drivers.length
            : state.driversPerPage
        );
      });
  },
});

export const { next, previous } = driverSlice.actions;
export const selectDriver = (state) => state.driver;
export default driverSlice.reducer;
